---
import { getSecret } from "astro:env/server";
import type { PropsWithChildren } from "react";
import {
  CustomImageType,
  MetaAttributeType,
  type MetaTag,
  MetaTagType,
  OpenGraph,
  OpenGraphType,
  SeoType,
} from "../lib/sanity/seo/types";
import { SEO } from "astro-seo";

interface Props {
  title: string;
  pageSlug?: string | undefined;
  pageSeo?: SeoType | undefined;
  siteSeo: SeoType | undefined;
}

/**
 * Props
 */
const { title, pageSlug, pageSeo, siteSeo } = Astro.props;

export const getOpenGraph = (args: OpenGraphType) => {
  const { description, image, title, _type, siteName, url } = args;
  const getImage = image ? resolveImage(image) : null;
  const values = {
    _type,
    description,
    siteName,
    url,
    title,
    images: [{ url: getImage ?? "" }],
  };
  return values as OpenGraph;
};

export const getMetaAttribute = (attrs: MetaAttributeType[] | undefined) => {
  if (!attrs) {
    return null;
  }

  const obj: Record<string, string> = {};

  attrs.map((i) => {
    Object.assign(obj, {
      [i?.attributeKey as string]:
        i.attributeType == "image"
          ? resolveImage(i?.attributeValueImage)
          : i.attributeValueString,
    });
  });

  return obj as unknown as MetaTag;
};

export const getMetaObjects = (
  tags: MetaTagType[],
  allowIndexing?: boolean,
) => {
  const tagArray: MetaTag[] = [];
  tags.map((tag) => {
    const excludeTag =
      !allowIndexing &&
      !!tag.metaAttributes?.find(
        (i) =>
          i?.attributeValueString?.includes("noindex") ||
          i?.attributeValueString?.includes("nofollow"),
      );
    if (!excludeTag) {
      const metaTag = getMetaAttribute(tag?.metaAttributes);
      if (metaTag) {
        tagArray.push(metaTag);
      }
    }
  });

  return tagArray;
};

export const resolveImage = (image?: CustomImageType) => {
  return image?.asset?.url ?? "";
};

const getTitle = () => {
  if (pageSeo?.metaTitle) {
    return pageSeo?.metaTitle;
  } else if (siteSeo?.metaTitle) {
    return siteSeo?.metaTitle;
  }

  return title;
};

const getDescription = () => {
  if (pageSeo?.metaDescription) {
    return pageSeo?.metaDescription;
  } else if (siteSeo?.metaDescription) {
    return siteSeo?.metaDescription;
  }

  return undefined;
};

const tags = () => {
  // (additionalMetaTags ? getMetaObjects(additionalMetaTags) : []
  if (pageSeo?.additionalMetaTags) {
    getMetaObjects(pageSeo?.additionalMetaTags);
  } else if (siteSeo?.additionalMetaTags) {
    getMetaObjects(siteSeo?.additionalMetaTags);
  }

  return [];
};

const canonicalUrl =
  (getSecret("PUBLIC_URL") ?? "") +
  (pageSlug?.startsWith("/") ? pageSlug : `/${pageSlug}`);

const openGraph = () => {
  const { openGraph } = pageSeo;
  const image = openGraph.image?.asset?.url;

  if (!image) {
    return undefined;
  }

  const graph = {
    basic: {
      type: "website",
      description: openGraph.description,
      siteName: openGraph.siteName,
      url: canonicalUrl,
      title: openGraph.title,
      image,
    },
  };
  return graph as OpenGraph;
};
---

<SEO
  titleTemplate={`%s - ${siteSeo.metaTitle}`}
  titleDefault={siteSeo.metaTitle}
  title={getTitle()}
  description={getDescription()}
  openGraph={openGraph()}
  twitter={pageSeo.twitter || siteSeo.twitter}
  canonical={canonicalUrl}
  noindex={pageSeo.nofollowAttributes}
  nofollow={pageSeo.nofollowAttributes}
  additionalMetaTags={tags()}
  extend={{
    link: [{ rel: "icon", href: "/favicon.ico" }],
  }}
/>
