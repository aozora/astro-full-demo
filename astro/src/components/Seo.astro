---
// import React, { useMemo } from "react";
import type { PropsWithChildren } from "react";
import { CustomImageType, MetaAttributeType, MetaTagType, OpenGraphType, SeoType } from "@lib/sanity/seo/types";
import { SEO } from "astro-seo";

interface Props {
  pageSeo: SeoType | undefined;
  siteSeo: SeoType | undefined;
}

export const getOpenGraph = (args: OpenGraphType) => {
  const { description, image, title, _type, siteName, url } = args;
  const getImage = image ? resolveImage(image) : null;
  const values = {
    _type,
    description,
    siteName,
    url,
    title,
    images: [{ url: getImage ?? "" }]
  };
  return values as NextSeoOpenGraph;
};

export const getMetaObjects = (tags: MetaTagType[], allowIndexing?: boolean) => {
  const tagArray: NextSeoMetaTag[] = [];
  tags.map(tag => {
    const excludeTag =
      !allowIndexing &&
      !!tag.metaAttributes?.find(
        i =>
          i?.attributeValueString?.includes("noindex") ||
          i?.attributeValueString?.includes("nofollow")
      );
    if (!excludeTag) {
      const metaTag = getMetaAttribute(tag?.metaAttributes);
      if (metaTag) {
        tagArray.push(metaTag);
      }
    }
  });
  return tagArray;
};

export const resolveImage = (image?: CustomImageType) => {
  return image?.asset?.url ?? "";
};

export const getMetaAttribute = (attrs: MetaAttributeType[] | undefined) => {
  if (!attrs) {
    return null;
  }
  const obj: Record<string, string> = {};
  attrs.map((i) => {
    Object.assign(obj, {
      [i?.attributeKey as string]:
        i.attributeType == "image"
          ? resolveImage(i?.attributeValueImage)
          : i.attributeValueString
    });
  });
  return obj as unknown as NextSeoMetaTag;
};


// interface CustomNextSeoProps {
//   seo: SeoType | null;
//   slug: string;
// }

const { pageSeo, siteSeo } = Astro.props;
// const { additionalMetaTags, metaDescription, metaTitle, twitter, nofollowAttributes, seoKeywords } = seo || {};

console.log({pageSeo});
// const tags =
//     () => (additionalMetaTags ? getMetaObjects(additionalMetaTags) : []),
//
//   );
// const openGraph =
//     () => (seo?.openGraph ? getOpenGraph(seo?.openGraph) : undefined),
//
//   );
// const url = (process.env.NEXT_PUBLIC_APP_URL ?? "") + (slug?.startsWith("/") ? slug : `/${slug}`);
---

<SEO
  title="A Very Descriptive Title"
  description="A heavily optimized description full of well-researched keywords."
  openGraph={{
    basic: {
      title: "A Very Descriptive Title",
      type: "A type.",
      image: "https://user-images.githubusercontent.com/5182256/131216951-8f74f425-f775-463d-a11b-0e01ad9fce8d.png",
    }
  }}
  twitter={{
    creator: "@jonasmerlins1"
  }}
  extend={{
    // extending the default link tags
        link: [{ rel: "icon", href: "/favicon.ico" }],
    // extending the default meta tags
        meta: [
      {
        name: "twitter:image",
        content: "https://user-images.githubusercontent.com/5182256/131216951-8f74f425-f775-463d-a11b-0e01ad9fce8d.png",
      },
      { name: "twitter:title", content: "Tinker Tailor Soldier Spy" },
      { name: "twitter:description", content: "Agent" },
    ],
  }}
/>

  <!--<NextSeo-->
  <!--  themeColor=""-->
  <!--  twitter={{-->
  <!--    handle: twitter?.creator,-->
  <!--    site: twitter?.site,-->
  <!--    cardType: twitter?.cardType-->
  <!--  }}-->
  <!--  nofollow={nofollowAttributes}-->
  <!--  noindex={nofollowAttributes}-->
  <!--  openGraph={openGraph}-->
  <!--  canonical={url || ""}-->
  <!--  additionalMetaTags={((seoKeywords && seoKeywords?.length > 0-->
  <!--    ? [{ name: "keywords", content: seoKeywords?.join(", ") }]-->
  <!--    : []) as NextSeoMetaTag[]).concat(tags ?? [])}-->
  <!--  title={metaTitle ?? ""}-->
  <!--  description={metaDescription ?? ""}-->
  <!--/>-->


